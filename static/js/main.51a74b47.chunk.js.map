{"version":3,"sources":["components/card/card.styles.module.scss","components/card-list/card-list.styles.module.scss","components/search-input/search-input.module.scss","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-input/search-input.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Card","props","monster","className","styles","src","id","alt","name","email","CardList","monsters","map","SearchInput","textChangeHandler","placeholder","type","onChange","App","componentDidMount","fetch","then","response","json","users","setState","console","log","filterNames","searchInput","searchInputValue","target","value","_","searchField","state","this","filteredUsers","filter","toLowerCase","includes","onClick","initializeMonstersHandler","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,iBAAiB,sC,gBCAnCD,EAAOC,QAAU,CAAC,YAAY,sC,gBCA9BD,EAAOC,QAAU,CAAC,OAAS,+B,uLCsBZC,EAnBF,SAACC,GAKZ,IAEQC,EAAYD,EAAZC,QAGR,OACE,sBAAKC,UAAWC,IAAO,kBAAvB,UACI,qBAAKC,IAAG,+BAA0BH,EAAQI,GAAlC,gBAPQ,OAOR,iBANC,WAM4EC,IAAI,YAC3F,6BAAKL,EAAQM,OACb,4BAAIN,EAAQO,Y,gBCWHC,EApBS,SAACT,GAOvB,IACEU,EACEV,EADFU,SAGF,OACE,qBAAKR,UAAWC,IAAO,aAAvB,SACGO,EAASC,KAAI,SAACV,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,U,OCdZO,EALK,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,kBAAmBC,EAAmB,EAAnBA,YAEtC,OAAO,uBAAOZ,UAAWC,SAAeY,KAAK,SAASC,SAAUH,EAAmBC,YAAaA,KC+CrFG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAOFC,kBAAoB,WAIlBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEd,SAAUa,OAC7CE,QAAQC,IAAI,sBAfA,EAkBdC,YAAc,SAACC,GACb,IAAMC,EAAmBD,EAAYE,OAAOC,MAC5C,EAAKP,UAAS,SAACQ,GAAD,MAAQ,CAAEC,YAAaJ,OAlBrC,EAAKK,MAAQ,CACXxB,SAAU,GACVuB,YAAa,IAJH,E,0CAuBd,WACE,MAAkCE,KAAKD,MAA/BxB,EAAR,EAAQA,SAAUuB,EAAlB,EAAkBA,YACZG,EAAgB1B,EAAS2B,QAAO,SAACpC,GAAD,OACpCA,EAAQM,KAAK+B,cAAcC,SAASN,EAAYK,kBAKlD,OAFAb,QAAQC,IAAI,gBAGV,sBAAKxB,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CAAaW,kBAAmBsB,KAAKR,YAAab,YAAY,oBAC9D,cAAC,EAAD,CAAUJ,SAAU0B,IACpB,wBAAQI,QAASL,KAAKM,0BAAtB,oC,GArCUC,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.51a74b47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card-container\":\"card_styles_card-container__2mev5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card-list\":\"card-list_styles_card-list__6QBZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search-input_search__1vyr7\"};","import React from \"react\";\n\nimport styles from \"./card.styles.module.scss\";\n\nconst Card = (props) => {\n  /**\n   * Renders a monster card\n   */\n\n  const typeOfMonster = \"set2\";\n  const imgSize= \"180x180\"\n  const { monster } = props;\n\n\n  return (\n    <div className={styles[\"card-container\"]}>\n        <img src={`https://robohash.org/${monster.id}?set=${typeOfMonster}&size=${imgSize}`} alt=\"monster\" />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\n// Components\nimport Card from \"components/card/card.component\";\n\n// Styles\nimport styles from \"./card-list.styles.module.scss\";\n\n\nexport const CardList = (props) => {\n  /**\n   * The purpose of this component is SOLELY just to arrange the cards properly.\n   * HOW each card should be rendered (and it's styles), should be handled by another component\n   */\n\n  // Component-important variables\n  const {\n    monsters, // responsible for rendering list of monsters\n  } = props;\n\n  return (\n    <div className={styles[\"card-list\"]}>\n      {monsters.map((monster) => (\n        <Card key={monster.id} monster={monster}/>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nimport * as styles from \"./search-input.module.scss\";\n\nconst SearchInput = ({ textChangeHandler, placeholder } ) => {\n\n    return <input className={styles.search} type=\"search\" onChange={textChangeHandler} placeholder={placeholder}/>\n}\n\nexport default SearchInput;","import { Component } from \"react\";\n// Styles\nimport \"./App.css\";\n\n// Components\nimport CardList from \"components/card-list/card-list.component\";\nimport SearchInput from \"components/search-input/search-input.component\";\n\nclass App extends Component {\n  constructor() {\n    super(); // to initialize Component's constructor\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    /**\n     * runs once ONLY. only when component mounts.\n     */\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n    console.log(\"ComponentDidMount\");\n  };\n\n  filterNames = (searchInput) => {\n    const searchInputValue = searchInput.target.value;\n    this.setState((_) => ({ searchField: searchInputValue }));\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredUsers = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    console.log(\"App rendered\")\n\n    return (\n      <div className=\"App\">\n        <h1>Sample Header</h1>\n        <SearchInput textChangeHandler={this.filterNames} placeholder=\"Find Monster(s)\"/>\n        <CardList monsters={filteredUsers} />\n        <button onClick={this.initializeMonstersHandler}>\n          Create Monsters\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}